.. _intro-backend-and-web:

============================================================
Introduction to MongoDB Realm for Backend and Web Developers
============================================================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

As a backend developer, you can use {+service+} to rapidly develop cloud-based applications.
Realm apps can react to changes in your `{+atlas+}
<https://www.mongodb.com/realm?tck=docs_realm#atlas-form-container>`_ data, connect that data to other systems,
and scale to meet demand. {+service-short+} does this without the need 
to manage database and server infrastructure.

As a web developer, you have to deal with lots of overhead when sending 
data from a server to the browser. This includes things like authentication 
and data validation. And then the application has to be scalable and secure. 
Many libraries and frameworks exist to provide these services.
Selecting the best ones for your project requires deep understanding of the tradeoffs.

{+backend+} is a serverless application backend that streamlines solving these 
common challenges. {+backend-short+} provides configurable functions, integrated data access, and security rules.
With {+backend-short+}, you can focus on building unique features instead of boilerplate backend code.

What Problem Does MongoDB Realm Solve?
--------------------------------------

It takes time, resources, and expertise to build, administer, and maintain
backend infrastructure. However, a lot of these features are similar across applications.
{+service+} manages the backend infrastructure and user management for you.
This frees you to focus on the features that makes your app special, not boilerplate code.

{+service+} is:

Serverless:
  - Deploy server-side applications without having to set up and manage server infrastructure. 
    {+service-short+} includes provisioning, deployment, operating systems, web servers, logging, backups, and redundancy.
  - Run cloud-based :term:`{+service-short+} Functions <{+service-short+}
    Function>` that can crunch data or interact with Node.js modules.
  - Skip writing an authentication API on top of your {+service+} service.
    Authenticated clients can interact with parts of the database based on their permissions.

Dynamic and responsive:
  - React to data changes in :term:`{+atlas+}`, process data from HTTPS endpoints,
    or run {+service-short+} Functions on a schedule with 
    :term:`{+service-short+} Triggers <{+service-short+} Trigger>`.
  - Get up and running quickly for free, then scale according to the demands of your application.
  - Pay for and receive only the exact amount of compute you need at any given time
    with usage-based pricing. Usage under a certain amount per month is always free.

Simply secure:
  - Let users log in with familiar :term:`authentication providers
    <authentication provider>` that are built into {+service+}.
  - Control which users may read and write data on a per-field basis with
    :ref:`role-based permissions <roles>` that you can define declaratively or
    with a function.
  - Enforce data integrity by defining :ref:`validation logic
    <schemas>` with :term:`{+backend-schema+}`.

Synchronized:
  - Seamlessly sync data across devices with :term:`{+sync+} <{+sync+}>`.
  - Avoid writing complex synchronization logic with the :ref:`Database SDKs <realm-sdks>`.

.. _intro-web-users:

User Authentication and Management
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Secure user authentication is essential for most apps. Some apps authenticate
users with traditional email/password combinations. Others use API keys or third-party
authentication providers like Facebook and Google. These methods often require a lot of 
complex boilerplate code.

{+backend+} provides built-in user management and authentication methods. These
features encapsulate complexity and make it easy to integrate third-party authentication
providers. You can enable authentication providers in your server-side configuration then immediately log in from any client application using a {+backend-short+} SDK.


To learn more about authentication in {+backend+}, see :ref:`users-and-authentication`.

.. _intro-web-schema:

Schema Validation and Data Access Rules
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Modern applications require that data is available using consistent types and formats.
Data consistency guarantees that all the application's components can work together.
It's also important to make sure that any given piece of data is only accessible
to an authorized user.  For example, you might grant a user access
to only their own data.

{+backend+} validates data with a {+backend-short+} schema you define in the `JSON schema <https://json-schema.org/>`__ standard.
A {+backend-short+} schema serves as the source of truth for defining data types in your application.
{+backend-short+} also uses the schema to map data between your application and a 
`{+atlas+} <https://www.mongodb.com/realm?tck=docs_realm#atlas-form-container>`_ collection.

You can also configure {+backend-short+} to secure data with role-based data access rules.
These rules determine each user's access to every document for every request.
A user can only insert, read, or modify data if both they and the document
meet pre-defined conditions.


To learn more about defining a schema and access rules for your data, see
:ref:`collection rules <mongodb-rules>`.

.. _intro-web-functions:

Event-Driven Serverless Functions
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Many applications require that some business logic runs on a server. Usually this
logic deals with sensitive user data or interacting with external services. Apps might
also need to respond in real time when something happens in the app or in an external service.

{+backend+} lets you define serverless JavaScript functions called {+backend-short+} Functions.
You can use Realm Functions for the following common backend use cases:

- Call from client applications with the Realm Web SDK.
- Execute Realm Functions in response to trigger events, like an update to a document in MongoDB or at a scheduled time.
- HTTPS endpoints that execute a function in response to external applications.

To learn more about defining and using serverless functions, see
:ref:`functions` and :ref:`triggers`.

.. _intro-web-query:

Secure Client-Side Queries
~~~~~~~~~~~~~~~~~~~~~~~~~~

Developers need efficient, secure data access.
If the data is on a server, you need an API to access the data and prevent unauthorized access.

The Realm Web SDK includes a :ref:`secure MongoDB client <intro-web-mql>` to interact with data. It uses
:ref:`GraphQL <intro-web-graphql>` and the :manual:`Query API </tutorial/query-documents>`
to access data in {+atlas+}. Use either or both of these APIs to work with
your application's data.

{+backend-short+}'s server-side rules ensures that users only read and modify permitted documents. 
Rules consist of one or more user roles for each collection. A role determines if
a given user has permission to access and edit a document. {+backend-short+} determines a role
for each document in every request. It then enforces the role's permissions before responding.

.. _intro-web-graphql:

GraphQL for MongoDB
```````````````````

:graphql:`GraphQL <>` is a standard, open-source API architecture that is an
alternative to REST and other HTTP APIs. It features a query language that lets you 
access only the data you need.


GraphQL has a couple of primary benefits for web developers:

- **Minimize Bandwidth**: GraphQL queries specify the exact fields to return. 
  This lets you to avoid fetching unnecessary data.

- **Minimize Roundtrips**: A single GraphQL endpoint handles all requests. 
  You can group your GraphQL queries into a single request to one endpoint instead of
  sending requests to multiple endpoints.

{+backend+} generates a GraphQL API for your application based on your :ref:`data model <intro-web-schema>`. 
The API includes a set of CRUD operations that you can access with a GraphQL client
or in a HTTP request. You can also create custom resolvers backed by :ref:`functions <intro-web-functions>`.

To learn more about the Realm GraphQL API, see :ref:`graphql-api`.

.. _intro-web-mql:

Client-Side MongoDB Queries
```````````````````````````

Traditionally developers query the database on the server and access the server
from the client through a HTTP API. This requires more developer resources and lacks
the flexibility of directly querying a database.

{+backend+} includes the :manual:`Query API </tutorial/query-documents>`,
a powerful API that lets you access {+atlas+} data from the client.
You can query {+atlas-short+} like you're using a database driver and {+service-short+} enforces 
:ref:`data access rules <intro-web-schema>` rules for all requests.

To learn more about the built-in MongoDB service, see :ref:`data-sources`.

Get Started with MongoDB Realm
------------------------------

You can ship your first app built with MongoDB Realm in minutes.

Tutorials
~~~~~~~~~

Check out our :doc:`tutorials </tutorials>` to learn more about how to build 
Realm Applications. Tutorials start with git repositories you can clone
and run, and walk you through code excerpts that are specific to working
with Realm.

To get started with your first web app, follow the :ref:`Task Tracker 
application tutorial <tutorial-task-tracker-web>`. You can also refer to the 
:ref:`Web SDK <web-intro>` documentation for TypeScript and JavaScript.

To get started with a backend app, follow our :ref:`GitHub Issue Tracker
tutorial <backend-tutorial>`. 

Prebuilt Applications
~~~~~~~~~~~~~~~~~~~~~

To explore a prebuilt app that you can customize, create a template app.
Template applications are working apps that use Realm services to do things 
like:

- Use Sync to synchronize data between mobile clients and the linked 
  MongoDB Atlas collection.
- Host a Todo web app using the :ref:`GraphQL API <graphql-api>`
- Host a Todo web app using the :ref:`Realm Web SDK <web-intro>`
- Manage event-driven :ref:`Database Triggers <database-trigger>` 
  to update views in a separate collection

Template apps are working apps you can run and change to experiment with 
Realm. These apps are a good choice for developers who prefer to learn by 
experimentation, versus the more description-heavy tutorials above.

Summary
-------

- {+backend+} is a serverless application platform that makes it easy to deploy
  and scale.
- You can build a {+app+} with custom logic via functions and triggers, 
  custom permissions via rules, and authentication via third-party SSO.
- {+service+}'s built-in :ref:`authentication system <users-and-authentication>` 
  simplifies user data access.
  You can add users to your app and define :ref:`permissions
  <permissions>` that control who can read and write data.
- Backend use cases for {+service+} include:

  - Crunching data
  - Reacting to data changes in MongoDB Atlas
  - Interacting with third-party services.
